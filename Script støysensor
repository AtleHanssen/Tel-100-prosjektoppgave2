// LiquidCrystal I2C - Version: Latest
#include <LiquidCrystal_I2C.h>
#include <Wire.h>

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/22bd9aca-84ea-4285-a6e0-0f664131725a

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int desibel;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

//Definerer konstanter:

// LEDlys:
const int LedPinGronn = 0;
const int LedPinGul1 = 1;
const int LedPinGul2 = 2;
const int LedPinRod1 = 3;
const int LedPinRod2 = 4;

//Lydsensor:
const int SoundPin = A6;

//Buzzer:
const int Buzzer = 5;


//Definerer instances:
LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  pinMode(LedPinGronn, OUTPUT);
  pinMode(LedPinGul1, OUTPUT);
  pinMode(LedPinGul2, OUTPUT);
  pinMode(LedPinRod1, OUTPUT);
  pinMode(LedPinRod2, OUTPUT);
  pinMode(SoundPin, INPUT);
  pinMode(Buzzer, OUTPUT);
  lcd.init();

  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  delay(1000);

  //Dette printer ut lydnivået i desibel.
  desibel = lagrer_lydnivaa();
  Serial.println(desibel);

  // Her kjører selve funksjonen som får STFU til å gi varsel.
  LydVarsel();

}


// Denne funkjonen tar inn lydsignalet og gjør det om til verdier tilnærmet desibel.
int lagrer_lydnivaa() {
  int lydnivaa = analogRead(SoundPin);
  //unsigned int signalMin = 0;
  //unsigned int signalMax = 1024;
  //int PeakToPeak = signalMax - signalMin;
  //int db = map(PeakToPeak, 20, 900, 30, 200);
  int db2 = map(lydnivaa, 0, 175, 0, 100);
  return db2 + 20;
  //return lydnivaa;
}

// Funksjonen printer ut varsel 1 på LCD skjermen.
void DispLCD1() {
  //Skrur på skjermen:
  // int CurrentTime = mills();
  //while CurrentTime <= 2000;
  lcd.backlight();

  // Print tekst til lcd skjerm
  lcd.setCursor(0, 0);
  lcd.print("STFU");

  lcd.setCursor(6, 0);
  lcd.print("Oskar!");


  //Tekst på linje 2:
  lcd.setCursor(0, 1);
  lcd.print("VARSEL");

  lcd.setCursor(9, 1);
  lcd.print("1");

  delay(2000);
  lcd.noBacklight();
  lcd.clear();
}

// Funksjonen printer ut varsel 2 på LCD skjermen.
void DispLCD2() {
  //Skrur på skjermen:
  lcd.backlight();

  // Print tekst til lcd skjerm
  lcd.setCursor(0, 0);
  lcd.print("STFU,");

  lcd.setCursor(6, 0);
  lcd.print("Oskar!");


  //Tekst på linje 2:
  lcd.setCursor(0, 1);
  lcd.print("VARSEL,");

  lcd.setCursor(9, 1);
  lcd.print("2");

  delay(2000);
  lcd.noBacklight();
  lcd.clear();
}

//Funksjonen skrur på det grønne lyset.
void GronnLysPaa() {
  digitalWrite(LedPinGronn, HIGH);
}

//Funksjonen skrur av det grønne lyset.
void GronnLysAv() {
  digitalWrite(LedPinGronn, LOW);
}

// Funksjonen setter i gang buzzeren i 2 sekunder.
void BuzzerTone() {
  tone(Buzzer, 500);
  delay(2000);
  noTone(Buzzer);
}

// Funksjonen får de to røde LEDlysene til å blinke alternerende
void AlternerendeBlinkRod() {
  int i = 0;
  for (i; i < 8; i++) {
    digitalWrite(LedPinRod1, HIGH);
    delay(100);

    digitalWrite(LedPinRod1, LOW);
    digitalWrite(LedPinRod2, HIGH);
    delay(100);

    digitalWrite(LedPinRod2, LOW);
  }
}

// Funksjonen får de to gule LEDlysene til å blinke alternerende.
void AlternerendeBlinkGul() {
  int i = 0;
  for (i; i < 8; i++) {
    //    CurrentTime = mills();
    //    PreviousTime = 0;
    //    if (CurrentTime - PreviousTime >= 1000){}
    digitalWrite(LedPinGul1, HIGH);

    delay(100);

    digitalWrite(LedPinGul1, LOW);
    digitalWrite(LedPinGul2, HIGH);
    delay(100);

    digitalWrite(LedPinGul2, LOW);
  }
}

// Dette er hovedfunkjonen som brukes i loopen.
// Funksjonen benytter seg av de andre funkjonene lagd ovenfor.
// Denne funksjonen styrer grenseverdiene og gir de ulike varsler dersom de ulike grenseverdiene overskrides.
void LydVarsel() {
  int threshold1 = 70;
  int threshold2 = 110;
  int lydnivaa = lagrer_lydnivaa();
  // Kan printe lydnivaa her slik at det
  if (lydnivaa < threshold1) {
    GronnLysPaa();
  }
  else if (lydnivaa > threshold1 && lydnivaa < threshold2) {
    GronnLysAv();
    DispLCD1();
    BuzzerTone();
    AlternerendeBlinkGul();
  }
  else if (lydnivaa > threshold2) {
    GronnLysAv();
    DispLCD2();
    BuzzerTone();
    AlternerendeBlinkRod();
  }
}
